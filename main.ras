program JumpMoFoJump;
@use "screen"
var	
	const spriteLocAddr : address = $ff8;
	const spriteLoc: integer = $3000;
	spriteLocIdx: byte = SpriteLoc/64;
	
	gameOver: boolean;
	score: integer;
	hiScore: integer = 0;
		
	spriteX: integer;
	spriteY: byte;
	spriteXBar: integer;
	spriteYPos: byte;
	spriteColor: byte;
	isMovingXN: boolean;
	isMovingXP: boolean;
	
	jumpActive: boolean;

// Here are some jump lookuptables i made using little commandline tool made in C# i'll add it to github someday.
// quick lowest jump shallan50k aug 2021 compo release jump ;)

	const jumpTime: byte = 40;
	jumpOffset: array[jumpTime] of byte = (0,1,3,5,6,8,9,11,12,13,15,16,17,18,18,19,20,20,20,20,20,20,20,20,19,18,18,17,16,15,13,12,11,9,8,6,5,3,1,0);

	sprites:incbin("mysprites.bin",spriteLoc);

// Joystick reading thingie
interrupt MainRaster();
begin
	startirq(1);
	Joystick(2);
	closeirq();
end;

procedure Cls();
begin
	ClearScreen(key_space, screen_char_loc);
	Screen::FillColorRam80(yellow);
end;

// Wait for button, forces actual new button press if button was already pressed.
procedure WaitJoyButton();
begin
	if joystickbutton then
	begin
		while(joystickbutton) do;
	end;
    while(joystickbutton<>1) do;
    while(joystickbutton) do;	
end;

procedure IntroScreen();
begin
	Cls();

	moveto(25, 1, hi(screen_char_loc));
    printstring("HALF OF AMFF AKA AIRJURI", 0, screen_width);
	moveto(33, 3, hi(screen_char_loc));
    printstring("PRESENTS", 0, screen_width);
  	moveto(31, 9, hi(screen_char_loc));
    printstring("SCORE OR DIE", 0, screen_width);
    
    WaitJoyButton();
	
end;

procedure MainMenu();
begin
	Cls();

	ToggleBit(sprite_bitmask,0,0);
	ToggleBit(sprite_bitmask,1,0);
	
	moveto(20, 1, hi(screen_char_loc));
    printstring("SCORE OR DIE", 0, screen_width);
	moveto(20, 3, hi(screen_char_loc));
    printstring("GET 65000 POINTS TO BE MEGA CHAMPION!", 0, screen_width);
	moveto(20, 5, hi(screen_char_loc));
    printstring("HINT: DO NOT DIE", 0, screen_width);
  	moveto(20, 15, hi(screen_char_loc));
    printstring("JOYSTICK 2, PUSH BUTTON TO START", 0, screen_width);
  	moveto(20, 9, hi(screen_char_loc));
    printstring("HIGHEST SCORE OF SESSION:", 0, screen_width);
  	moveto(46, 9, hi(screen_char_loc));
    printdecimal(hiScore, 4);
    
    WaitJoyButton();
end;


procedure GameOver();
begin
	Cls();
	
  	moveto(35, 9, hi(screen_char_loc));
    printstring("GAME OVER", 0, screen_width);
    
    if score>=hiScore then
    begin
	    hiScore:=score;
	    moveto(20,11,hi(screen_char_loc));
	    printstring("CONGRATULATIONS FOR HIGH SCORE", 0, screen_width);
	    moveto(20,13,hi(screen_char_loc));
	    if hiScore<64000 then 
		begin
			printstring("RANK: REGULAR CHAMP", 0, screen_width);
	    end
		else 
		begin
		 	printstring("RANK: MEGA CHAMPION 65000! IT IS ENOUGH!", 0, screen_width);
	    end;
		moveto(20,15,hi(screen_char_loc));
	    printstring("NEW HIGH SCORE:", 0, screen_width);
	    moveto(36,15,hi(screen_char_loc));
	    printdecimal(hiScore, 4);
    end
    else
    begin
  		moveto(35, 11, hi(screen_char_loc));
    	printstring("SAD TIMES", 0, screen_width);
	end;
	
	WaitJoyButton();
end;

// Jump handler
procedure jumpper();
var
	jumpStage:byte = 0;
begin
		
	inc(jumpStage);
	
	if jumpStage>=jumpTime then 
	begin
		jumpActive:=0;
		jumpStage:=0;
	end;
end;

// Ball animation handler
procedure AdvanceRoll();
var
	rollStage:integer = 2;	// Sprite index of first stage of animation.
	rollSpeed:byte = 0;
	spriteIdx:byte = 0;
begin
	inc(rollSpeed); 
	if rollSpeed>3 then		// rollspeed is just calculated, no interrupts needed.
	begin
		rollSpeed:=0;
		rollStage:=rollStage+1;
		if rollStage>5 then rollStage:=2;	// 5 is last sprite in animation.
		spriteIdx:=spriteLocIdx+rollStage;
	end;
end;

procedure To3Mhz();
begin
	asm("
        lda #$00
        sta $d06f

        ldx #$47
        stx $d02f
        ldx #$53
        stx $d02f
        lda $d031
        ora #$40
        sta $d031
        lda $d054
        and #$bf
        sta $d054
    ");
end;

procedure To40Mhz();
begin
	asm("
        lda #$00
        sta $d06f
        lda $d054
        ora #$40
        sta $d054
    ");
end;


//        ldx #$47
//        stx $d02f
//        ldx #$53
//        stx $d02f
//        lda $d031
//        ora #$40

//        sta $d031



procedure ScoreOrDie();
begin
	// This is my hitbox check. So no hardware collision detection here :)
	if ((spriteX > spriteXBar-8) and spriteX < spriteXBar+8 )then
	begin
		// If protagonist is high enough when inside x hitbox, add score and print it.
		if spriteYPos < 229-15 then
		begin
			score:=score+5;
			moveto(7, 0, hi(screen_char_loc));
    		printdecimal(score,4);
		end
		else	// Otherwise you're dead.
		begin
			gameOver:=1;
		end;
	end;
	
end;
		
	
	
procedure GameLoop();
begin
	// Initialize variables.
	score:= 0;
	spriteX:= 160;
	spriteY:= 229;
	spriteXBar:= 511;	// First time the rolling ball doesn't come straight away on view
//	spriteYPos:= 100;	
	isMovingXN:= 0;
	isMovingXP:= 0;
	jumpActive:= 0;
	jumpStage:= 0;
	
	spriteIdx:= spriteLocIdx + rollStage;
	
	Cls();
	moveto(0, 0, hi(screen_char_loc));
    printstring("SCORE:", 0, screen_width);
	moveto(7, 0, hi(screen_char_loc));
	printdecimal(score,4);
	
	// Sprites to start position
	SpritePos(spriteX,spriteYPos,0);
	SpritePos(spriteXBar,229,1);

	WaitForVerticalBlank();
	// Sprites on
	ToggleBit(sprite_bitmask,0,1);
	ToggleBit(sprite_bitmask,1,1);
	
	gameOver:= 0;
	While (gameOver<>1) do
	begin
				
		// If jump is active you cannot stop or change direction of protagonist.
		if jumpActive=1 then
		begin
			if isMovingXN=1 then
			begin
				spriteX:=spriteX-2;
				if spriteX<2 then spriteX:=343;
			end
			else if isMovingXP=1 then
			begin
				spriteX:=spriteX+2;
				if spriteX>343 then spriteX:=2;							
			end;
		end
		else 
		begin
			// Don't need y movement... yet.
			//if (joystickup and (spriteY>0)) then dec(spriteY);
			//if (joystickdown and (spriteY<229)) then inc(spriteY);		
			
			isMovingXN:=0;	// Moving left indicator, jumpstage movement needs this information.
			isMovingXP:=0;	// Moving right indicator, ^^^
			if joystickleft then
			begin
				spriteLocAddr[0]:=spriteLocIdx+1;	// Change sprite to left direction image
				isMovingXN:=1;
				spriteX:=spriteX-2;
				if spriteX<2 then spriteX:=343;	
			end
			else if joystickright then
			begin
				spriteLocAddr[0]:=spriteLocIdx;		// Change sprite to right direction image
				isMovingXP:=1;
				spriteX:=spriteX+2;
				if spriteX>343 then spriteX:=2;			
			end;
		end;
		
		if joystickbutton then jumpActive:=1;		// Activate jump if button is pressed
		
		if jumpActive=1 then jumpper(); 			// Jump offset calculation
		spriteYPos:=spriteY-jumpOffset[jumpStage]; 	// calculate actual y position
		
		if spriteYPos>spriteY then spriteYPos:=0; 	// Check if actual calculated Y position is wrapped
		
		spriteXBar:=spriteXBar-2;					// Move "enemy"
		if spriteXBar<10 then 
		begin
			spriteXBar:=330;
		end;
		
		ScoreOrDie();	// CHeck the collision / score calculation
		
		if score>=65000 then gameOver:=1;	// Flag out of loop if player gets too much score :D
		
		AdvanceRoll();	// handle sprite animation speed
		
		WaitForVerticalBlank();
		spriteLocAddr[1]:=spriteIdx;
		SpritePos(spriteX,spriteYPos,0);
		SpritePos(spriteXBar,229,1);
		
	end;

end;

// Main program

begin
	// Initialize the screen + enable VIC4
	Screen::Init();
	Screen::EnableVIC4();
	//Screen::Set80ColumnMode();
	Screen::spritePointerAddress:=#spriteLocAddr;

	poke(^$d06c, 0, lo(spriteLocAddr));
    poke(^$d06d, 0, hi(spriteLocAddr));
    poke(^$d06e, 0, 0); //128

	StartRasterChain(MainRaster(),0,1);

	// Pink "enemy"
	poke(^$d100, 2, $ef); // r
	poke(^$d200, 2, $22); // g
	poke(^$d300, 2, $aa); // b
	
	// Dark green border color
	poke(^$d100, 3, $00); // r
	poke(^$d200, 3, $77); // g
	poke(^$d300, 3, $00); // b
	
	screen_bg_col := 3;
	screen_fg_col := black;

	spriteLocAddr[0]:=spriteLocIdx+1; 
	spriteLocAddr[2]:=spriteLocIdx+2;
	
	sprite_color[0]:=1;
	sprite_color[1]:=2;
	
	To3Mhz();
	
	IntroScreen();
	
	while(1) do
	begin
		MainMenu();
		To40Mhz();
		GameLoop();
		To3Mhz();
		GameOver();		
	end;
end.